prometheus:
  alertmanager:
    config:
      route:
        group_by: ['alertname']
        group_wait: 30s
        group_interval: 5m
        receiver: 'null'
        routes:
          - receiver: "discord"
          - receiver: "null"
            matchers:
            - alertname =~ "Watchdog|InfoInhibitor"
      recievers:
        - name: "null"
    ingress:
      enabled: true
      hosts:
        - alertmanager.k8s.labs.ahinh.me
      ingressClassName: nginx
      pathType: ImplementationSpecific
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        external-dns.alpha.kubernetes.io/hostname: alertmanager.k8s.labs.ahinh.me
      tls:
        - hosts:
            - alertmanager.k8s.labs.ahinh.me
          secretName: alertmanager-cert-tls
    alertmanagerSpec:
      secrets:
        - alertmanager-ext-secret
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: csi-rbd-sc
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 10Gi

  grafana:
    useStatefulSet: true
    persistence:
      enabled: true
      storageClassName: csi-rbd-sc
      type: pvc
      accessModes:
        - ReadWriteOnce
      size: 10Gi
      inMemory:
        enabled: false
    grafana.ini:
      server:
        root_url: https://grafana.k8s.labs.ahinh.me
      auth.github:
        enabled: true
        allow_sign_up: true
        scopes: user:email,read:org
        auth_url: https://github.com/login/oauth/authorize
        token_url: https://github.com/login/oauth/access_token
        api_url: https://api.github.com/user
    envFromSecrets:
      - name: grafana-ext-secret

    ingress:
      enabled: true
      hosts:
        - grafana.k8s.labs.ahinh.me
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        external-dns.alpha.kubernetes.io/hostname: grafana.k8s.labs.ahinh.me
      tls:
        - hosts:
            - grafana.k8s.labs.ahinh.me
          secretName: grafana-cert-tls
    # additionalDataSources:
    #   - name: loki
    #     type: 'loki'
    #     access: 'proxy'
    #     org_id: 1
    #     url: 'http://loki.loki:3100'
    #     version: 1
    #     editable: false
  prometheus:
    ingress:
      enabled: true
      hosts:
        - prometheus.k8s.labs.ahinh.me
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        external-dns.alpha.kubernetes.io/hostname: prometheus.k8s.labs.ahinh.me
      tls:
        - hosts:
            - prometheus.k8s.labs.ahinh.me
          secretName: prometheus-cert-tls
          
    thanosService:
      enabled: true
    thanosRuler:
      enabled: true
    thanosIngress:
      enabled: true
      hosts:
        - thanos.k8s.labs.ahinh.me
      ingressClassName: nginx
      pathType: ImplementationSpecific
      annotations:
        cert-manager.io/cluster-issuer: "letsencrypt"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        external-dns.alpha.kubernetes.io/hostname: thanos.k8s.labs.ahinh.me
      tls:
        - hosts:
            - thanos.k8s.labs.ahinh.me
          secretName: thanos-cert-tls
    prometheusSpec:
      ruleSelectorNilUsesHelmValues: false
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      thanos:
        objectStorageConfig:
          existingSecret:
            name: prometheus-thanos-s3
            key: cloud

    service:
      annotations:
        service.cilium.io/global: "true"

  prometheusOperator:
    service:
      annotations:
        service.cilium.io/global: "true"
